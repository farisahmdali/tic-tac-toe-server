"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userRoutesController_1 = __importDefault(require("../controller/userRoutesController"));
const middleware_1 = __importDefault(require("../middlewares/middleware"));
const router = express_1.default.Router();
router.post("/signup", userRoutesController_1.default.signup);
router.post("/otp", userRoutesController_1.default.otp);
router.get("/getuser", middleware_1.default.verifyToken, userRoutesController_1.default.getUser);
router.get("/login", userRoutesController_1.default.login);
router.post("/resetPasswordOtp", userRoutesController_1.default.resetPasswordOtp);
router.post("/resetPassword", userRoutesController_1.default.resetPassword);
router.get("/searchUser", middleware_1.default.verifyToken, userRoutesController_1.default.searchUser);
router.post("/host-tournament", middleware_1.default.verifyToken, userRoutesController_1.default.hostTournament);
router.get("/get-room-id", middleware_1.default.verifyToken, userRoutesController_1.default.getRoomId);
router.get("/get-tournaments", middleware_1.default.verifyToken, userRoutesController_1.default.getTournaments);
router.get("/get-opponent-details", middleware_1.default.verifyToken, userRoutesController_1.default.getOpponentDetails);
router.get("/get-my-tournaments", middleware_1.default.verifyToken, userRoutesController_1.default.getMyTournament);
router.post("/save-tournaments", middleware_1.default.verifyToken, userRoutesController_1.default.saveTournament);
router.get("/get-tournament-details", middleware_1.default.verifyToken, userRoutesController_1.default.getTournamentDetails);
router.get("/searchTournament", middleware_1.default.verifyToken, userRoutesController_1.default.searchTournament);
router.post("/addfrnd", middleware_1.default.verifyToken, userRoutesController_1.default.addfrnd);
router.get("/getfrnds-details", middleware_1.default.verifyToken, userRoutesController_1.default.getFrndsDetails);
router.get("/rank-sorted", middleware_1.default.verifyToken, userRoutesController_1.default.getRankSorted);
router.post("/addNotification", middleware_1.default.verifyToken, userRoutesController_1.default.addNotification);
router.post("/updateName", middleware_1.default.verifyToken, userRoutesController_1.default.updateName);
router.post("/removefrnd", middleware_1.default.verifyToken, userRoutesController_1.default.removefrnd);
router.get("/orderPayment", middleware_1.default.verifyToken, userRoutesController_1.default.orderPayment);
router.post("/addCredits", middleware_1.default.verifyToken, userRoutesController_1.default.addCredits);
router.post("/withdraw", middleware_1.default.verifyToken, userRoutesController_1.default.withdraw);
router.get("/withdrawLogin", userRoutesController_1.default.withdrawLogin);
router.get("/get-withdraw-data", middleware_1.default.verifyWithdraw, userRoutesController_1.default.getWithdrawdata);
router.post("/withdraw-done", middleware_1.default.verifyWithdraw, userRoutesController_1.default.withdrawDone);
exports.default = router;
